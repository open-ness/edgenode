// Code generated by protoc-gen-go. DO NOT EDIT.
// source: newIP.proto

package openness_newIP

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IP struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_638f938657a75436, []int{0}
}

func (m *IP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IP.Unmarshal(m, b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IP.Marshal(b, m, deterministic)
}
func (m *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(m, src)
}
func (m *IP) XXX_Size() int {
	return xxx_messageInfo_IP.Size(m)
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type Reply struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_638f938657a75436, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*IP)(nil), "openness.newIP.IP")
	proto.RegisterType((*Reply)(nil), "openness.newIP.reply")
}

func init() { proto.RegisterFile("newIP.proto", fileDescriptor_638f938657a75436) }

var fileDescriptor_638f938657a75436 = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4b, 0x2d, 0xf7,
	0x0c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcb, 0x2f, 0x48, 0xcd, 0xcb, 0x4b, 0x2d,
	0x2e, 0xd6, 0x03, 0x8b, 0x2a, 0x89, 0x70, 0x31, 0x79, 0x06, 0x08, 0xf1, 0x81, 0x48, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x26, 0xcf, 0x00, 0x25, 0x59, 0x2e, 0xd6, 0xa2, 0xd4, 0x82, 0x9c,
	0x4a, 0x21, 0x11, 0x28, 0x03, 0x2a, 0x07, 0xe1, 0x18, 0x39, 0x70, 0x71, 0x78, 0x06, 0x84, 0x16,
	0xa4, 0x24, 0x96, 0xa4, 0x0a, 0x99, 0x70, 0xb1, 0x82, 0x4d, 0x12, 0x12, 0xd2, 0x43, 0x35, 0x5a,
	0xcf, 0x33, 0x40, 0x4a, 0x14, 0x5d, 0x0c, 0xac, 0x5f, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x1a, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x31, 0x61, 0x04, 0x9c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IPUpdateClient is the client API for IPUpdate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPUpdateClient interface {
	NewIP(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Reply, error)
}

type iPUpdateClient struct {
	cc *grpc.ClientConn
}

func NewIPUpdateClient(cc *grpc.ClientConn) IPUpdateClient {
	return &iPUpdateClient{cc}
}

func (c *iPUpdateClient) NewIP(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/openness.newIP.IPUpdate/newIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPUpdateServer is the server API for IPUpdate service.
type IPUpdateServer interface {
	NewIP(context.Context, *IP) (*Reply, error)
}

// UnimplementedIPUpdateServer can be embedded to have forward compatible implementations.
type UnimplementedIPUpdateServer struct {
}

func (*UnimplementedIPUpdateServer) NewIP(ctx context.Context, req *IP) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewIP not implemented")
}

func RegisterIPUpdateServer(s *grpc.Server, srv IPUpdateServer) {
	s.RegisterService(&_IPUpdate_serviceDesc, srv)
}

func _IPUpdate_NewIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPUpdateServer).NewIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openness.newIP.IPUpdate/NewIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPUpdateServer).NewIP(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPUpdate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openness.newIP.IPUpdate",
	HandlerType: (*IPUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "newIP",
			Handler:    _IPUpdate_NewIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newIP.proto",
}
